/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class GEOVectorTile, NSArray, VGLMeshVendor, VGLTexture, VKAnimation, VKHeightfield, VKStylesheet, __end_;

@interface VKBuildingFootprintMaker : NSObject <VKTileHeightInformation> {
    struct vector<std::__1::vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> >, vk_allocator<std::__1::vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> > > > { 
        struct vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> > {} *__begin_; 
        struct vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> > {} *__end_; 
        struct __compressed_pair<std::__1::vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> > *, vk_allocator<std::__1::vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> > > > { 
            struct vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> > {} *__first_; 
        } __end_cap_; 
    struct vector<std::__1::vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> >, vk_allocator<std::__1::vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> > > > { 
        struct vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> > {} *__begin_; 
        struct vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> > {} *__end_; 
        struct __compressed_pair<std::__1::vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> > *, vk_allocator<std::__1::vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> > > > { 
            struct vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> > {} *__first_; 
        } __end_cap_; 
    /* Warning: unhandled struct encoding: '{vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> >="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<VGLMeshVendor **, vk_allocator<VGLMeshVendor *> >="__first_"^@}}' */ struct vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> > { 
        __end_ **__begin_; 
    /* Warning: unhandled struct encoding: '{vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> >="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<VGLMeshVendor **, vk_allocator<VGLMeshVendor *> >="__first_"^@}}' */ struct vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> > { 
        __end_ **__begin_; 
    struct { 
        double v[4][4]; 
    struct vector<VKBuildingHeightMap, vk_allocator<VKBuildingHeightMap> > { 
        struct { /* ? */ } *__begin_; 
        struct { /* ? */ } *__end_; 
        struct __compressed_pair<VKBuildingHeightMap *, vk_allocator<VKBuildingHeightMap> > { 
            struct { /* ? */ } *__first_; 
        } __end_cap_; 
    struct unordered_map<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> >, std::__1::hash<int>, std::__1::equal_to<int>, vk_allocator<std::__1::pair<const int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > > > > { 
        struct __hash_table<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, std::__1::__unordered_map_hasher<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> >, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> >, std::__1::equal_to<int>, true>, vk_allocator<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > > > > { 
            struct unique_ptr<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> *> > > { 
                struct __compressed_pair<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> *> > > { 
                    struct __hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> {} **__first_; 
                    struct __bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> *> > { 
                        struct __compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> *> > { 
                            unsigned long __first_; 
                        } __data_; 
                    } __second_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> > > { 
                struct __hash_node_base<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> *> { 
                    struct __hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> {} *__next_; 
                } __first_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> >, std::__1::hash<int>, true> > { 
                unsigned long __first_; 
            } __p2_; 
            struct __compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> >, std::__1::equal_to<int>, true> > { 
                float __first_; 
            } __p3_; 
        } __table_; 
    float _alpha;
    VKAnimation *_animateBuildingMode;
    VKAnimation *_animateIn;
    VKAnimation *_animateOut;
    float _contentScale;
    } _discontinuityEdgeInfoMap;
    VGLMeshVendor *_footprintStrokeMeshVendor;
    VGLMeshVendor *_footprintsMeshVendor;
    GEOVectorTile *_geotile;
    VKHeightfield *_heightfield;
    } _landmarkHeights;
    VGLMeshVendor *_landmarksMeshVendor;
    float _maxHeight;
    float _maxLayeringHeight;
    float _minLayeringHeight;
    VGLMeshVendor *_pointyBuildingsMeshVendor;
    struct DiscontinuityEdgeInfo { id x1; boolx2; unsigned int x3; } *_realisticDiscontinuityEdgeInfo;
    } _realisticFacadeCollections;
    struct DiscontinuityEdgeInfo { id x1; boolx2; unsigned int x3; } *_regularDiscontinuityEdgeInfo;
    } _regularFacadeCollection;
    } _regularFacadeCollections;
    float _scale;
    VGLTexture *_shadowTexture;
    } _shadowTextureMatrix;
    struct DiscontinuityEdgeInfo { id x1; boolx2; unsigned int x3; } *_sharedDiscontinuityEdgeInfo;
    } _sharedFacadeCollection;
    VKStylesheet *_stylesheet;
    struct BuildingTopMeshFactory { struct unordered_map<unsigned int, vk::BuildingTopMeshFactory::Group, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, vk_allocator<std::__1::pair<const unsigned int, vk::BuildingTopMeshFactory::Group> > > { struct __hash_table<std::__1::pair<unsigned int, vk::BuildingTopMeshFactory::Group>, std::__1::__unordered_map_hasher<unsigned int, vk::BuildingTopMeshFactory::Group, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, vk::BuildingTopMeshFactory::Group, std::__1::equal_to<unsigned int>, true>, vk_allocator<std::__1::pair<unsigned int, vk::BuildingTopMeshFactory::Group> > > { struct unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned int, vk::BuildingTopMeshFactory::Group>, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, vk::BuildingTopMeshFactory::Group>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::pair<unsigned int, vk::BuildingTopMeshFactory::Group>, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, vk::BuildingTopMeshFactory::Group>, void *> *> > > { struct __hash_node<std::__1::pair<unsigned int, vk::BuildingTopMeshFactory::Group>, void *> {} **x_1_4_1; struct __bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, vk::BuildingTopMeshFactory::Group>, void *> *> > { struct __compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, vk::BuildingTopMeshFactory::Group>, void *> *> > { unsigned long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, vk::BuildingTopMeshFactory::Group>, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, vk::BuildingTopMeshFactory::Group>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, vk::BuildingTopMeshFactory::Group>, void *> *> { struct __hash_node<std::__1::pair<unsigned int, vk::BuildingTopMeshFactory::Group>, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, vk::BuildingTopMeshFactory::Group, std::__1::hash<unsigned int>, true> > { unsigned long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, vk::BuildingTopMeshFactory::Group, std::__1::equal_to<unsigned int>, true> > { float x_4_3_1; } x_1_2_4; } x_1_1_1; } x1; struct unordered_map<unsigned int, vk::BuildingTopMeshFactory::Group, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, vk_allocator<std::__1::pair<const unsigned int, vk::BuildingTopMeshFactory::Group> > > { struct __hash_table<std::__1::pair<unsigned int, vk::BuildingTopMeshFactory::Group>, std::__1::__unordered_map_hasher<unsigned int, vk::BuildingTopMeshFactory::Group, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, vk::BuildingTopMeshFactory::Group, std::__1::equal_to<unsigned int>, true>, vk_allocator<std::__1::pair<unsigned int, vk::BuildingTopMeshFactory::Group> > > { struct unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned int, vk::BuildingTopMeshFactory::Group>, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, vk::BuildingTopMeshFactory::Group>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::pair<unsigned int, vk::BuildingTopMeshFactory::Group>, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, vk::BuildingTopMeshFactory::Group>, void *> *> > > { struct __hash_node<std::__1::pair<unsigned int, vk::BuildingTopMeshFactory::Group>, void *> {} **x_1_4_1; struct __bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, vk::BuildingTopMeshFactory::Group>, void *> *> > { struct __compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, vk::BuildingTopMeshFactory::Group>, void *> *> > { unsigned long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, vk::BuildingTopMeshFactory::Group>, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, vk::BuildingTopMeshFactory::Group>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, vk::BuildingTopMeshFactory::Group>, void *> *> { struct __hash_node<std::__1::pair<unsigned int, vk::BuildingTopMeshFactory::Group>, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, vk::BuildingTopMeshFactory::Group, std::__1::hash<unsigned int>, true> > { unsigned long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, vk::BuildingTopMeshFactory::Group, std::__1::equal_to<unsigned int>, true> > { float x_4_3_1; } x_1_2_4; } x_2_1_1; } x2; unsigned int x3; } *_topMeshFactory;
}

@property float alpha;
@property(retain) VKAnimation * animateBuildingMode;
@property(retain) VKAnimation * animateIn;
@property(retain) VKAnimation * animateOut;
@property(readonly) NSArray * footprintStrokeMeshes;
@property(readonly) NSArray * footprintsMeshes;
@property(readonly) NSArray * landmarksMeshes;
@property(readonly) float maxHeight;
@property(readonly) float maxLayeringHeight;
@property(readonly) float minLayeringHeight;
@property(readonly) NSArray * pointyBuildingsMeshes;
@property float scale;
@property(readonly) VGLTexture * shadowTexture;
@property(readonly) const struct { double x1[4][4]; }* shadowTextureMatrix;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_makeFootprintsMesh;
- (void)_makeMeshesWithLandmarksPresent:(BOOL)arg1 makeFacades:(BOOL)arg2 pointyFootprints:(struct unordered_map<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > >, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, vk_allocator<std::__1::pair<const unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > > > > > { struct __hash_table<std::__1::pair<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > >, std::__1::equal_to<unsigned int>, true>, vk_allocator<std::__1::pair<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > > > > > { struct unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > > >, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > > >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > > >, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > > >, void *> *> > > { struct __hash_node<std::__1::pair<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > > >, void *> {} **x_1_3_1; struct __bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > > >, void *> *> > { struct __compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > > >, void *> *> > { unsigned long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > > >, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > > >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > > >, void *> *> { struct __hash_node<std::__1::pair<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > > >, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > >, std::__1::hash<unsigned int>, true> > { unsigned long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > >, std::__1::equal_to<unsigned int>, true> > { float x_4_2_1; } x_1_1_4; } x1; }*)arg3 useHiResFootprints:(BOOL)arg4;
- (void)_makeShadowTextureWithVectorTile:(id)arg1 skipLandmarks:(BOOL)arg2 pointyFootprints:(const struct unordered_map<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > >, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, vk_allocator<std::__1::pair<const unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > > > > > { struct __hash_table<std::__1::pair<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > >, std::__1::equal_to<unsigned int>, true>, vk_allocator<std::__1::pair<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > > > > > { struct unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > > >, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > > >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > > >, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > > >, void *> *> > > { struct __hash_node<std::__1::pair<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > > >, void *> {} **x_1_3_1; struct __bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > > >, void *> *> > { struct __compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > > >, void *> *> > { unsigned long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > > >, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > > >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > > >, void *> *> { struct __hash_node<std::__1::pair<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > > >, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > >, std::__1::hash<unsigned int>, true> > { unsigned long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > >, std::__1::equal_to<unsigned int>, true> > { float x_4_2_1; } x_1_1_4; } x1; }*)arg3 useHiResFootprints:(BOOL)arg4 landmarks:(const struct { struct { id x_1_1_1; char *x_1_1_2; unsigned int x_1_1_3; unsigned int x_1_1_4; unsigned int x_1_1_5; unsigned int x_1_1_6; unsigned int x_1_1_7; unsigned long long x_1_1_8; BOOL x_1_1_9; unsigned long long x_1_1_10; float x_1_1_11; id x_1_1_12; int x_1_1_13; } x1; char *x2; unsigned int x3; }*)arg5 landmarkCount:(unsigned int)arg6;
- (BOOL)_makeThreeDBuildingsMesh:(const struct { struct { id x_1_1_1; char *x_1_1_2; unsigned int x_1_1_3; unsigned int x_1_1_4; unsigned int x_1_1_5; unsigned int x_1_1_6; unsigned int x_1_1_7; unsigned long long x_1_1_8; BOOL x_1_1_9; unsigned long long x_1_1_10; float x_1_1_11; id x_1_1_12; int x_1_1_13; } x1; char *x2; unsigned int x3; }*)arg1 buildingCount:(unsigned int)arg2;
- (float)alpha;
- (id)animateBuildingMode;
- (id)animateIn;
- (id)animateOut;
- (void)dealloc;
- (const struct vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > { struct DiscontinuityEdgeInfo {} **x1; struct DiscontinuityEdgeInfo {} **x2; struct __compressed_pair<const vk::DiscontinuityEdgeInfo **, vk_allocator<const vk::DiscontinuityEdgeInfo *> > { struct DiscontinuityEdgeInfo {} **x_3_1_1; } x3; }*)discontinuityEdgeInfoWithVectorType:(int)arg1;
- (const struct vector<std::__1::vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> >, vk_allocator<std::__1::vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> > > > { struct vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> > {} *x1; struct vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> > {} *x2; struct __compressed_pair<std::__1::vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> > *, vk_allocator<std::__1::vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> > > > { struct vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> > {} *x_3_1_1; } x3; }*)facadeCollectionsWithVectorType:(int)arg1;
- (id)footprintStrokeMeshes;
- (id)footprintsMeshes;
- (void)forEachTopMesh:(id)arg1 forVectorType:(int)arg2 atLayer:(unsigned int)arg3;
- (void)forEachTopMesh:(id)arg1 topStrokeMesh:(id)arg2 forVectorType:(int)arg3;
- (void)forEachTopStrokeMesh:(id)arg1 forVectorType:(int)arg2 atLayer:(unsigned int)arg3;
- (BOOL)heightAtX:(float)arg1 Y:(float)arg2 outZ:(float*)arg3;
- (id)initWithVectorTile:(id)arg1 stylesheet:(id)arg2 makeFacades:(BOOL)arg3;
- (id)landmarksMeshes;
- (float)maxHeight;
- (float)maxLayeringHeight;
- (float)minLayeringHeight;
- (id)pointyBuildingsMeshes;
- (float)scale;
- (void)setAlpha:(float)arg1;
- (void)setAnimateBuildingMode:(id)arg1;
- (void)setAnimateIn:(id)arg1;
- (void)setAnimateOut:(id)arg1;
- (void)setScale:(float)arg1;
- (id)shadowTexture;
- (const struct { double x1[4][4]; }*)shadowTextureMatrix;

@end
