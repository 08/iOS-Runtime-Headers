/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@class <VGLCanvas>, VGLRoadAtlas, VGLTexture, VKCamera, VKViewTransform;

@interface VKDrawContext : VGLContext {
    struct { 
        double v[4][4]; 
    struct { 
        double v[4][4]; 
    union { 
        struct { 
            float m00; 
            float m01; 
            float m02; 
            float m03; 
            float m10; 
            float m11; 
            float m12; 
            float m13; 
            float m20; 
            float m21; 
            float m22; 
            float m23; 
            float m30; 
            float m31; 
            float m32; 
            float m33; 
        } ; 
        float m[16]; 
    struct Vec3Imp<double> { 
        double x; 
        double y; 
        double z; 
    struct VKEdgeInsets { 
        float top; 
        float left; 
        float bottom; 
        float right; 
    VGLRoadAtlas *_alphaAtlas;
    VGLTexture *_alphaTexture;
    VGLTexture *_arrowTexture;
    VGLTexture *_borderTexture;
    VKCamera *_camera;
    <VGLCanvas> *_canvas;
    BOOL _cullFaceEnabled;
    int _frameNumber;
    BOOL _gesturing;
    BOOL _hasMovingOccluders;
    BOOL _hasOccluders;
    } _labelEdgeInsets;
    } _light;
    unsigned int _mapLayerPosition;
    VGLTexture *_mediumTrafficTexture;
    } _modelMatrix;
    } _modelViewProjectionMatrix;
    } _shaderMatrix;
    VGLTexture *_slowTrafficTexture;
    unsigned char _stencilStart;
    double _styleZ;
    double _timestamp;
    VKViewTransform *_viewTransform;
}

@property(readonly) VGLRoadAtlas * alphaAtlas;
@property(readonly) VGLTexture * alphaTexture;
@property(readonly) VGLTexture * arrowTexture;
@property(readonly) VGLTexture * borderTexture;
@property(readonly) VKCamera * camera;
@property <VGLCanvas> * canvas;
@property int frameNumber;
@property(getter=isGesturing) BOOL gesturing;
@property BOOL hasMovingOccluders;
@property BOOL hasOccluders;
@property struct VKEdgeInsets { float x1; float x2; float x3; float x4; } labelEdgeInsets;
@property struct Vec3Imp<double> { double x1; double x2; double x3; } light;
@property unsigned int mapLayerPosition;
@property(readonly) VGLTexture * mediumTrafficTexture;
@property const struct { double x1[4][4]; }* modelMatrix;
@property(readonly) const struct { double x1[4][4]; }* modelViewProjectionMatrix;
@property(readonly) union { struct { float x_1_1_1; float x_1_1_2; float x_1_1_3; float x_1_1_4; float x_1_1_5; float x_1_1_6; float x_1_1_7; float x_1_1_8; float x_1_1_9; float x_1_1_10; float x_1_1_11; float x_1_1_12; float x_1_1_13; float x_1_1_14; float x_1_1_15; float x_1_1_16; } x1; float x2[16]; } shaderMatrix;
@property(readonly) VGLTexture * slowTrafficTexture;
@property(readonly) double styleZ;
@property double timestamp;
@property(retain) VKViewTransform * viewTransform;

- (id).cxx_construct;
- (id)alphaAtlas;
- (id)alphaTexture;
- (id)arrowTexture;
- (id)borderTexture;
- (id)camera;
- (id)canvas;
- (void)dealloc;
- (void)debugDrawAsteriskAtPixel:(struct Vec2Imp<float> { float x1; float x2; })arg1 color:(struct _VGLColor { float x1; float x2; float x3; float x4; })arg2;
- (void)debugDrawAsteriskAtPoint:(struct Vec2Imp<float> { float x1; float x2; })arg1 color:(struct _VGLColor { float x1; float x2; float x3; float x4; })arg2;
- (void)debugDrawAsteriskAtWorldPoint:(struct VKPoint { double x1; double x2; double x3; })arg1 color:(struct _VGLColor { float x1; float x2; float x3; float x4; })arg2;
- (void)debugDrawPath:(int)arg1 pixels:(struct Vec2Imp<float> { float x1; float x2; }*)arg2 color:(struct _VGLColor { float x1; float x2; float x3; float x4; })arg3;
- (void)debugDrawPath:(int)arg1 points:(struct Vec2Imp<float> { float x1; float x2; }*)arg2 color:(struct _VGLColor { float x1; float x2; float x3; float x4; })arg3;
- (void)debugDrawString:(id)arg1 pixel:(struct Vec2Imp<float> { float x1; float x2; })arg2 color:(struct _VGLColor { float x1; float x2; float x3; float x4; })arg3 fontSize:(float)arg4;
- (void)debugDrawString:(id)arg1 point:(struct Vec2Imp<float> { float x1; float x2; })arg2 color:(struct _VGLColor { float x1; float x2; float x3; float x4; })arg3 fontSize:(float)arg4;
- (void)debugDrawString:(id)arg1 worldPoint:(struct VKPoint { double x1; double x2; double x3; })arg2 color:(struct _VGLColor { float x1; float x2; float x3; float x4; })arg3 fontSize:(float)arg4;
- (int)drawDebugText:(id)arg1 lineNumber:(int)arg2;
- (int)frameNumber;
- (BOOL)hasMovingOccluders;
- (BOOL)hasOccluders;
- (BOOL)isGesturing;
- (struct VKEdgeInsets { float x1; float x2; float x3; float x4; })labelEdgeInsets;
- (struct Vec3Imp<double> { double x1; double x2; double x3; })light;
- (unsigned int)mapLayerPosition;
- (void)markStencilAsDirty;
- (id)mediumTrafficTexture;
- (const struct { double x1[4][4]; }*)modelMatrix;
- (const struct { double x1[4][4]; }*)modelViewProjectionMatrix;
- (struct Vec2Imp<float> { float x1; float x2; })pixelForPoint:(struct Vec2Imp<float> { float x1; float x2; })arg1;
- (struct Vec2Imp<float> { float x1; float x2; })pixelForWorldPoint:(struct VKPoint { double x1; double x2; double x3; })arg1;
- (unsigned char)reserveStencilValues:(unsigned char)arg1;
- (void)setCanvas:(id)arg1;
- (void)setFrameNumber:(int)arg1;
- (void)setGesturing:(BOOL)arg1;
- (void)setHasMovingOccluders:(BOOL)arg1;
- (void)setHasOccluders:(BOOL)arg1;
- (void)setLabelEdgeInsets:(struct VKEdgeInsets { float x1; float x2; float x3; float x4; })arg1;
- (void)setLight:(struct Vec3Imp<double> { double x1; double x2; double x3; })arg1;
- (void)setMapLayerPosition:(unsigned int)arg1;
- (void)setModelMatrix:(const struct { double x1[4][4]; }*)arg1;
- (void)setTimestamp:(double)arg1;
- (void)setViewTransform:(id)arg1;
- (union { struct { float x_1_1_1; float x_1_1_2; float x_1_1_3; float x_1_1_4; float x_1_1_5; float x_1_1_6; float x_1_1_7; float x_1_1_8; float x_1_1_9; float x_1_1_10; float x_1_1_11; float x_1_1_12; float x_1_1_13; float x_1_1_14; float x_1_1_15; float x_1_1_16; } x1; float x2[16]; })shaderMatrix;
- (id)slowTrafficTexture;
- (void)startFrameWithCamera:(id)arg1;
- (double)styleZ;
- (float)styleZAdjust;
- (double)timestamp;
- (id)viewTransform;

@end
