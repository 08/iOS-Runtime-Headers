/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VoiceMemos.framework/VoiceMemos
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class <RCTrimControllerDelegate>, AVAssetExportSession, AVItem, NSString, RCAVPreviewController, RCSavedRecording, RCTrimControl, UIButton, UIView, UIWindow;

@interface RCTrimController : NSObject <RCTrimControlDelegate, RCAVPreviewControllerObserver> {
    UIButton *_cancelButton;
    id _completionHandler;
    UIButton *_confirmButton;
    NSString *_confirmButtonTitle;
    UIView *_containerView;
    <RCTrimControllerDelegate> *_delegate;
    UIView *_dimmingView;
    double _endTimeInterval;
    AVAssetExportSession *_exportSession;
    double _maxTrimmedDuration;
    double _minTrimmedDuration;
    UIButton *_playButton;
    BOOL _playing;
    RCAVPreviewController *_previewController;
    RCSavedRecording *_recording;
    AVItem *_recordingItem;
    NSString *_recordingPath;
    NSString *_remadeRecordingPath;
    double _startTimeInterval;
    UIWindow *_statusBarDimmingWindow;
    RCTrimControl *_trimControl;
    UIView *_view;
}

@property(copy) NSString * confirmButtonTitle;
@property <RCTrimControllerDelegate> * delegate;
@property double endTimeInterval;
@property(readonly) BOOL isTrimming;
@property double maxTrimmedDuration;
@property double minTrimmedDuration;
@property(readonly) RCSavedRecording * recording;
@property(readonly) NSString * recordingPath;
@property double startTimeInterval;
@property(readonly) float trimmingProgress;

- (void).cxx_destruct;
- (void)_applicationWillResignActive:(id)arg1;
- (void)_beginPreview;
- (void)_cancel:(id)arg1;
- (void)_confirm:(id)arg1;
- (void)_dismiss;
- (void)_endPreview;
- (void)_initialize;
- (id)_newButtonWithStyle:(int)arg1;
- (void)_pausePreview;
- (void)_play:(id)arg1;
- (id)_recordingAVItem;
- (double)_recordingDuration;
- (id)_recordingPath;
- (void)_resumePreview;
- (id)_view;
- (id)confirmButtonTitle;
- (void)dealloc;
- (id)delegate;
- (double)endTimeInterval;
- (id)init;
- (id)initWithRecordingPath:(id)arg1;
- (id)initWithSavedRecording:(id)arg1;
- (BOOL)isTrimming;
- (double)maxTrimmedDuration;
- (double)minTrimmedDuration;
- (void)presentInWindow:(id)arg1 completionHandler:(id)arg2;
- (void)previewController:(id)arg1 playbackDidBeginWithRate:(float)arg2;
- (void)previewController:(id)arg1 playbackDidStopPlayingWithError:(id)arg2;
- (void)previewController:(id)arg1 playbackTimeDidJumpWithPreviousTime:(double)arg2;
- (void)previewController:(id)arg1 playbackTimeDidUpdateToCurrentTime:(double)arg2;
- (id)recording;
- (id)recordingPath;
- (void)setConfirmButtonTitle:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setEndTimeInterval:(double)arg1;
- (void)setMaxTrimmedDuration:(double)arg1;
- (void)setMinTrimmedDuration:(double)arg1;
- (void)setStartTimeInterval:(double)arg1;
- (double)startTimeInterval;
- (void)trimControl:(id)arg1 didScrubToTimeInterval:(double)arg2;
- (void)trimControlDidBeginScrubbing:(id)arg1;
- (void)trimControlDidBeginTrimming:(id)arg1;
- (void)trimControlDidEndScrubbing:(id)arg1;
- (float)trimmingProgress;

@end
