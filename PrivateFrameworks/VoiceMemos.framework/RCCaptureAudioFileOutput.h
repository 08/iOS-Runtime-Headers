/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VoiceMemos.framework/VoiceMemos
 */

@class <RCCaptureAudioFileOutputRecordingDelegate>, AVAssetWriter, AVCaptureAudioDataOutput, AVCaptureSession, NSMutableArray, NSObject<OS_dispatch_queue>, NSURL, NSUUID;

@interface RCCaptureAudioFileOutput : NSObject <AVCaptureAudioDataOutputSampleBufferDelegate> {
    AVAssetWriter *_assetWriter;
    AVCaptureSession *_captureSession;
    NSMutableArray *_delegateBlocks;
    BOOL _manageSessionRunState;
    double _maxRecordedDuration;
    unsigned int _maxRecordedFileSize;
    NSURL *_outputFileURL;
    BOOL _processingSamples;
    NSObject<OS_dispatch_queue> *_queue;
    <RCCaptureAudioFileOutputRecordingDelegate> *_recordingDelegate;
    NSUUID *_recordingSessionID;
    NSURL *_recordingURL;
    AVCaptureAudioDataOutput *_sampleBufferDataOutput;
    NSObject<OS_dispatch_queue> *_sampleBufferQueue;
    unsigned int _sampleBuffersWritten;
    int _state;
}

@property(retain) AVAssetWriter * assetWriter;
@property(readonly) AVCaptureSession * captureSession;
@property(readonly) BOOL manageSessionRunState;
@property double maxRecordedDuration;
@property unsigned int maxRecordedFileSize;
@property(copy) NSURL * outputFileURL;
@property(retain) NSObject<OS_dispatch_queue> * queue;
@property(readonly) <RCCaptureAudioFileOutputRecordingDelegate> * recordingDelegate;
@property(copy) NSUUID * recordingSessionID;
@property(readonly) NSURL * recordingURL;
@property(retain) AVCaptureAudioDataOutput * sampleBufferDataOutput;
@property(retain) NSObject<OS_dispatch_queue> * sampleBufferQueue;
@property int state;

- (void).cxx_destruct;
- (void)_checkIfRecordingSessionEverStarted:(id)arg1;
- (void)_clearSampleDataOutput;
- (void)_finalizeAssetWriting;
- (void)_scheduleMainThreadDelegateBlock:(id)arg1;
- (void)_setState:(int)arg1;
- (BOOL)_setupAssetWriter:(id*)arg1 sampleBufferRef:(struct opaqueCMSampleBuffer { }*)arg2;
- (void)_setupSampleBufferDataOutput;
- (int)_state;
- (id)assetWriter;
- (void)captureOutput:(id)arg1 didOutputSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg2 fromConnection:(id)arg3;
- (id)captureSession;
- (id)connectionWithMediaType:(id)arg1;
- (void)dealloc;
- (void)endRecording;
- (id)initWithCaptureSession:(id)arg1 manageSessionRunState:(BOOL)arg2;
- (BOOL)isRecording;
- (BOOL)isRecordingPaused;
- (BOOL)manageSessionRunState;
- (double)maxRecordedDuration;
- (unsigned int)maxRecordedFileSize;
- (id)outputFileURL;
- (void)pauseRecording;
- (id)queue;
- (id)recordingDelegate;
- (id)recordingSessionID;
- (id)recordingURL;
- (void)resumeRecording;
- (id)sampleBufferDataOutput;
- (id)sampleBufferQueue;
- (void)setAssetWriter:(id)arg1;
- (void)setMaxRecordedDuration:(double)arg1;
- (void)setMaxRecordedFileSize:(unsigned int)arg1;
- (void)setOutputFileURL:(id)arg1;
- (void)setQueue:(id)arg1;
- (void)setRecordingSessionID:(id)arg1;
- (void)setSampleBufferDataOutput:(id)arg1;
- (void)setSampleBufferQueue:(id)arg1;
- (void)setState:(int)arg1;
- (BOOL)startRecordingToOutputFileURL:(id)arg1 recordingDelegate:(id)arg2;
- (int)state;

@end
