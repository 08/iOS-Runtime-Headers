/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@class TSDGLShader;

@interface TSDGLEdgeDistanceFieldMorphEffect : NSObject {
    struct CGSize { 
        float width; 
        float height; 
    struct CGSize { 
        float width; 
        float height; 
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    struct CGPoint { 
        float x; 
        float y; 
    BOOL _didSetupSkewAngleOffsetX;
    BOOL _didTeardown;
    } _incomingTextBounds;
    unsigned int _incomingTextureName;
    } _incomingTextureSize;
    BOOL _isTextStyleIdenticalExceptSize;
    } _outgoingTextBounds;
    unsigned int _outgoingTextureName;
    } _outgoingTextureSize;
    TSDGLShader *_shader;
    } _skewAngleOffsetX;
}

@property(readonly) unsigned int incomingTextureName;
@property BOOL isTextStyleIdenticalExceptSize;
@property(readonly) unsigned int outgoingTextureName;
@property(readonly) TSDGLShader * shader;

- (void)dealloc;
- (unsigned int)incomingTextureName;
- (id)initWithOutgoingTR:(id)arg1 incomingTR:(id)arg2;
- (id)initWithOutgoingTextureName:(unsigned int)arg1 outgoingTextureSize:(struct CGSize { float x1; float x2; })arg2 outgoingTextBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg3 outgoingColor:(struct { float x1; float x2; float x3; float x4; })arg4 incomingTextureName:(unsigned int)arg5 incomingTextureSize:(struct CGSize { float x1; float x2; })arg6 incomingTextBounds:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg7 incomingColor:(struct { float x1; float x2; float x3; float x4; })arg8;
- (BOOL)isTextStyleIdenticalExceptSize;
- (struct CGContext { }*)newContextFromTexture:(id)arg1;
- (unsigned int)outgoingTextureName;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })p_actualPixelBoundsOfTexturedRectangle:(id)arg1;
- (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })p_affineTransformConvertingRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 intoRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 atPercent:(float)arg3;
- (struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })p_affineTransformWithSkewAngleOffsetX:(struct CGPoint { float x1; float x2; })arg1 textureSize:(struct CGSize { float x1; float x2; })arg2;
- (float)p_errorFromApplyingSkewAngleOffsetX:(struct CGPoint { float x1; float x2; })arg1 toOutgoingScanlines:(float*)arg2 incomingScanlines:(float*)arg3 samples:(unsigned int)arg4;
- (void)p_fillScanlineLocations:(float*)arg1 samples:(unsigned int)arg2 fromTexture:(unsigned int)arg3 textureSize:(struct CGSize { float x1; float x2; })arg4;
- (void)setIsTextStyleIdenticalExceptSize:(BOOL)arg1;
- (void)setupShaderWithMorphPercent:(float)arg1 MVPMatrix:(struct CATransform3D { float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; })arg2 generateTextureMatrices:(BOOL)arg3;
- (void)setupShaderWithMorphPercent:(float)arg1 MVPMatrix:(struct CATransform3D { float x1; float x2; float x3; float x4; float x5; float x6; float x7; float x8; float x9; float x10; float x11; float x12; float x13; float x14; float x15; float x16; })arg2 outgoingTextureMatrix:(struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })arg3 incomingTextureMatrix:(struct CGAffineTransform { float x1; float x2; float x3; float x4; float x5; float x6; })arg4;
- (id)shader;
- (void)teardown;
- (struct CGPoint { float x1; float x2; })textureMatchingSkewAngleOffsetX;

@end
