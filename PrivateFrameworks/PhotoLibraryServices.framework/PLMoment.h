/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PhotoLibraryServices.framework/PhotoLibraryServices
 */

@class NSArray, NSData, NSDate, NSOrderedSet, NSString, PLManagedAsset, PLMomentLibrary, PLMomentList, PLRevGeoCompoundNameInfo;

@interface PLMoment : PLManagedObject <PLAssetContainer> {
    PLRevGeoCompoundNameInfo *_cachedPrimaryNameInfo;
    PLRevGeoCompoundNameInfo *_cachedSecondaryNameInfo;
    BOOL _loadedNameInfo;
    BOOL didRegisteredWithUserInterfaceContext;
    BOOL isRegisteredForChanges;
}

@property(readonly) unsigned int approximateCount;
@property(retain) NSData * approximateLocationData;
@property(retain) NSOrderedSet * assets;
@property(readonly) unsigned int assetsCount;
@property int cachedCount;
@property int cachedPhotosCount;
@property int cachedVideosCount;
@property(readonly) BOOL canShowAvalancheStacks;
@property(readonly) BOOL canShowComments;
@property BOOL didRegisteredWithUserInterfaceContext;
@property(retain) NSDate * endDate;
@property short generationType;
@property(readonly) BOOL isEmpty;
@property BOOL isRegisteredForChanges;
@property(retain) PLManagedAsset * keyAsset;
@property(readonly) NSArray * localizedLocationNames;
@property(readonly) NSString * localizedTitle;
@property(retain) PLMomentList * megaMomentList;
@property(retain) PLMomentLibrary * momentLibrary;
@property(readonly) unsigned int photosCount;
@property(retain) NSDate * representativeDate;
@property(retain) NSData * reverseLocationData;
@property BOOL reverseLocationDataIsValid;
@property(retain) PLManagedAsset * secondaryKeyAsset;
@property(retain) NSDate * startDate;
@property(retain) PLManagedAsset * tertiaryKeyAsset;
@property(retain) NSString * title;
@property(retain) NSString * uuid;
@property(readonly) unsigned int videosCount;
@property(retain) PLMomentList * yearMomentList;

+ (id)allAssetsIncludedInMomentsInLibrary:(id)arg1;
+ (id)allAssetsIncludedInMomentsInManagedObjectContext:(id)arg1 error:(id*)arg2;
+ (id)allMomentsInLibrary:(id)arg1;
+ (id)allMomentsInManagedObjectContext:(id)arg1 error:(id*)arg2;
+ (id)allMomentsRequiringAnalysisInManagedObjectContext:(id)arg1 error:(id*)arg2;
+ (id)entityInManagedObjectContext:(id)arg1;
+ (id)entityName;
+ (id)insertNewMomentFromCluster:(id)arg1 inManagedObjectContext:(id)arg2;
+ (id)insertNewMomentInManagedObjectContext:(id)arg1 error:(id*)arg2;

- (void)_updateCachedNameInfoIfNeeded;
- (BOOL)_validateForInsertOrUpdate:(id*)arg1;
- (void)addAssets:(id)arg1;
- (void)addAssetsObject:(id)arg1;
- (unsigned int)approximateCount;
- (id)approximateLocation;
- (unsigned int)assetsCount;
- (void)awakeFromFetch;
- (void)awakeFromInsert;
- (BOOL)canPerformEditOperation:(int)arg1;
- (BOOL)canShowAvalancheStacks;
- (BOOL)canShowComments;
- (void)dealloc;
- (void)delete;
- (id)diagnosticInformation;
- (BOOL)didRegisteredWithUserInterfaceContext;
- (void)didTurnIntoFault;
- (id)groupURL;
- (void)insertAssets:(id)arg1 atIndexes:(id)arg2;
- (void)insertObject:(id)arg1 inAssetsAtIndex:(unsigned int)arg2;
- (BOOL)isCloudSharedAlbum;
- (BOOL)isEmpty;
- (BOOL)isMeaningful;
- (BOOL)isRegisteredForChanges;
- (id)keyAsset;
- (id)localizedLocationNames;
- (id)localizedTitle;
- (id)mutableAssets;
- (unsigned int)photosCount;
- (struct CGImage { }*)posterImage;
- (void)registerForChanges;
- (void)removeAssets:(id)arg1;
- (void)removeAssetsAtIndexes:(id)arg1;
- (void)removeAssetsObject:(id)arg1;
- (void)removeObjectFromAssetsAtIndex:(unsigned int)arg1;
- (void)replaceAssetsAtIndexes:(id)arg1 withAssets:(id)arg2;
- (void)replaceObjectInAssetsAtIndex:(unsigned int)arg1 withObject:(id)arg2;
- (id)secondaryKeyAsset;
- (void)setDidRegisteredWithUserInterfaceContext:(BOOL)arg1;
- (void)setIsRegisteredForChanges:(BOOL)arg1;
- (void)setKeyAsset:(id)arg1;
- (void)setSecondaryKeyAsset:(id)arg1;
- (void)setTertiaryKeyAsset:(id)arg1;
- (BOOL)supportsDiagnosticInformation;
- (id)tertiaryKeyAsset;
- (void)unregisterForChanges;
- (void)updateMomentFromCluster:(id)arg1;
- (BOOL)validateForInsert:(id*)arg1;
- (BOOL)validateForUpdate:(id*)arg1;
- (unsigned int)videosCount;
- (void)willSave;
- (void)willTurnIntoFault;

@end
