/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/WebKit.framework/WebKit
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class m_tableSize;

@interface WebGeolocationProviderIOS : NSObject <WebGeolocationProvider> {
    struct RetainPtr<WebGeolocationCoreLocationProvider> { 
        struct WebGeolocationCoreLocationProvider { Class x_0_1_1; } *m_ptr; 
    struct RetainPtr<_WebCoreLocationUpdateThreadingProxy> { 
        struct _WebCoreLocationUpdateThreadingProxy { Class x_0_1_1; } *m_ptr; 
    struct HashMap<WTF::RetainPtr<WebView>, WTF::RetainPtr<id<WebGeolocationProviderInitializationListener> >, WTF::PtrHash<WTF::RetainPtr<WebView> >, WTF::HashTraits<WTF::RetainPtr<WebView> >, WTF::HashTraits<WTF::RetainPtr<id<WebGeolocationProviderInitializationListener> > > > { 
        struct HashTable<WTF::RetainPtr<WebView>, WTF::KeyValuePair<WTF::RetainPtr<WebView>, WTF::RetainPtr<id<WebGeolocationProviderInitializationListener> > >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<WebView>, WTF::RetainPtr<id<WebGeolocationProviderInitializationListener> > > >, WTF::PtrHash<WTF::RetainPtr<WebView> >, WTF::HashMapValueTraits<WTF::HashTraits<WTF::RetainPtr<WebView> >, WTF::HashTraits<WTF::RetainPtr<id<WebGeolocationProviderInitializationListener> > > >, WTF::HashTraits<WTF::RetainPtr<WebView> > > { 
            struct KeyValuePair<WTF::RetainPtr<WebView>, WTF::RetainPtr<id<WebGeolocationProviderInitializationListener> > > {} *m_table; 
            int m_tableSize; 
            int m_tableSizeMask; 
            int m_keyCount; 
            int m_deletedCount; 
        } m_impl; 
    struct HashSet<WebView *, WTF::PtrHash<WebView *>, WTF::HashTraits<WebView *> > { 
        /* Warning: unhandled struct encoding: '{HashTable<WebView *, WebView *, WTF::IdentityExtractor, WTF::PtrHash<WebView *>, WTF::HashTraits<WebView *>, WTF::HashTraits<WebView *> >="m_table"^@"m_tableSize"i"m_tableSizeMask"i"m_keyCount"i"m_deletedCount"i}}' */ struct HashTable<WebView *, WebView *, WTF::IdentityExtractor, WTF::PtrHash<WebView *>, WTF::HashTraits<WebView *>, WTF::HashTraits<WebView *> > { 
            m_tableSize **m_table; 
        } m_impl; 
    struct HashSet<WebView *, WTF::PtrHash<WebView *>, WTF::HashTraits<WebView *> > { 
        /* Warning: unhandled struct encoding: '{HashTable<WebView *, WebView *, WTF::IdentityExtractor, WTF::PtrHash<WebView *>, WTF::HashTraits<WebView *>, WTF::HashTraits<WebView *> >="m_table"^@"m_tableSize"i"m_tableSizeMask"i"m_keyCount"i"m_deletedCount"i}}' */ struct HashTable<WebView *, WebView *, WTF::IdentityExtractor, WTF::PtrHash<WebView *>, WTF::HashTraits<WebView *>, WTF::HashTraits<WebView *> > { 
            m_tableSize **m_table; 
        } m_impl; 
    struct HashSet<WebView *, WTF::PtrHash<WebView *>, WTF::HashTraits<WebView *> > { 
        /* Warning: unhandled struct encoding: '{HashTable<WebView *, WebView *, WTF::IdentityExtractor, WTF::PtrHash<WebView *>, WTF::HashTraits<WebView *>, WTF::HashTraits<WebView *> >="m_table"^@"m_tableSize"i"m_tableSizeMask"i"m_keyCount"i"m_deletedCount"i}}' */ struct HashTable<WebView *, WebView *, WTF::IdentityExtractor, WTF::PtrHash<WebView *>, WTF::HashTraits<WebView *>, WTF::HashTraits<WebView *> > { 
            m_tableSize **m_table; 
        } m_impl; 
    struct HashSet<WebView *, WTF::PtrHash<WebView *>, WTF::HashTraits<WebView *> > { 
        /* Warning: unhandled struct encoding: '{HashTable<WebView *, WebView *, WTF::IdentityExtractor, WTF::PtrHash<WebView *>, WTF::HashTraits<WebView *>, WTF::HashTraits<WebView *> >="m_table"^@"m_tableSize"i"m_tableSizeMask"i"m_keyCount"i"m_deletedCount"i}}' */ struct HashTable<WebView *, WebView *, WTF::IdentityExtractor, WTF::PtrHash<WebView *>, WTF::HashTraits<WebView *>, WTF::HashTraits<WebView *> > { 
            m_tableSize **m_table; 
        } m_impl; 
    struct RetainPtr<NSTimer> { 
        struct NSTimer { Class x_0_1_1; } *m_ptr; 
    struct RetainPtr<WebGeolocationPosition> { 
        struct WebGeolocationPosition { Class x_0_1_1; id x_0_1_2; } *m_ptr; 
    } _coreLocationProvider;
    } _coreLocationUpdateListenerProxy;
    BOOL _enableHighAccuracy;
    BOOL _isSuspended;
    } _lastPosition;
    } _pendingInitialPositionWebView;
    } _registeredWebViews;
    } _sendLastPositionAsynchronouslyTimer;
    BOOL _shouldResetOnResume;
    } _trackedWebViews;
    } _warmUpWebViews;
    } _webViewsWaitingForCoreLocationStart;
}

+ (id)sharedGeolocationProvider;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_handlePendingInitialPosition:(id)arg1;
- (void)_startCoreLocationDelegate;
- (void)_stopCoreLocationDelegateIfNeeded;
- (void)cancelWarmUpForWebView:(id)arg1;
- (void)dealloc;
- (void)errorOccurred:(id)arg1;
- (void)geolocationDelegateStarted;
- (void)geolocationDelegateUnableToStart;
- (void)initializeGeolocationForWebView:(id)arg1 listener:(id)arg2;
- (id)lastPosition;
- (void)positionChanged:(id)arg1;
- (void)registerWebView:(id)arg1;
- (void)resetGeolocation;
- (void)resume;
- (void)setEnableHighAccuracy:(BOOL)arg1;
- (void)stopTrackingWebView:(id)arg1;
- (void)suspend;
- (void)unregisterWebView:(id)arg1;

@end
